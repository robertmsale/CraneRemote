/*
    Created by Robert Sale, January 2024

    -- DESCRIPTION
    Common logic between transmitter and receiver.
*/

#ifndef CR_COMMON
#define CR_COMMON
#include <Arduino.h>
#include <Adafruit_SSD1306.h>
#include <Wire.h>
#include <RF24.h>
#include <EEPROM.h>
#include <Bounce2.h>

/*
    Project encapsulated namespace
*/
namespace CraneRemote {
    /*
        Many of these are implicitly used by OLED and RF24 but included for clarity
    */
    namespace DigitalInputs {
        constexpr int BATTERY_CHARGER_ENABLED = 2;
        constexpr int RF_CHANNEL_UP = 4;
        constexpr int RF_CHANNEL_DOWN = 5;
        constexpr int RF_CE = 7;
        constexpr int RF_CSN = 8;
        constexpr int UP_BUTTON = 9;
        constexpr int DOWN_BUTTON = 10;
        constexpr int RF_MOSI = 11;
        constexpr int RF_MISO = 12;
        constexpr int RF_SCK = 13;
        constexpr int OLED_RESET = -1;
    }

    /*
        Used implicitly by OLED
    */
    namespace AnalogInputs {
        constexpr int OLED_SDA = 5;
        constexpr int OLED_SCL = 6;
    }

    /*
        Adafruit_SSD1306 OLED settings
    */
    namespace OLED {
        struct Dimensions {
            int16_t WIDTH;
            int16_t HEIGHT;
        };
        constexpr Dimensions SCREEN = {128, 64};
        constexpr Dimensions HUD_AREA = {128, 16};
        constexpr Dimensions FUN_AREA = {128, 48}; // basically where commands are displayed
        Adafruit_SSD1306& display() {
            static Adafruit_SSD1306 oled{
                SCREEN.WIDTH,
                SCREEN.HEIGHT,
                &Wire,
                DigitalInputs::OLED_RESET
            };
            return oled; 
        };
    }

    namespace UI {
        constexpr char channel[] = "Channel: ";

        void drawChannel() {
            auto chn = Radio::radio().getChannel();
            // Empty buffer
            char buffer[14] = "\0\0\0\0\0\0\0\0\0\0\0\0\0";
            // Copy "Channel: " into buffer
            strcpy(buffer, channel);
            // Convert channel to char array and insery into buffer at "Channel: ^"
            itoa(chn, buffer+9, 10);
            // Set cursor in top left corner
            OLED::display().setCursor(0,0);
            // Write characters to display
            for (int i = 0; i < 14; ++i) {
                OLED::display().write(buffer);
            }
        }

#pragma region Bitmaps        
        constexpr uint8_t UP_ARROW[] = {
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000011, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000000000000000111000000000000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00001111, 0b11100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000000000000011111110000000000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00111111, 0b11111000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000000000001111111111100000000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000000000111111111111111000000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00000011, 0b11111111, 0b11111111, 0b10000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000000011111111111111111110000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00001111, 0b11111111, 0b11111111, 0b11100000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000001111111111111111111111100000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00111111, 0b11111111, 0b11111111, 0b11111000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000111111111111111111111111111000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b11111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000011111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000011, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b10000000, 0b00000000, 0b00000000, // 00000000000000000000001111111111111111111111111111111111100000000000000000000000
            0b00000000, 0b00000000, 0b00001111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11100000, 0b00000000, 0b00000000, // 00000000000000000000111111111111111111111111111111111111111000000000000000000000
            0b00000000, 0b00000000, 0b00111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111000, 0b00000000, 0b00000000, // 00000000000000000011111111111111111111111111111111111111111110000000000000000000
            0b00000000, 0b00000000, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, // 00000000000000001111111111111111111111111111111111111111111111100000000000000000
            0b00000000, 0b00000011, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b10000000, 0b00000000, // 00000000000000111111111111111111111111111111111111111111111111111000000000000000
            0b00000000, 0b00001111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11100000, 0b00000000, // 00000000000011111111111111111111111111111111111111111111111111111110000000000000
            0b00000000, 0b00111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111000, 0b00000000, // 00000000001111111111111111111111111111111111111111111111111111111111100000000000
            0b00000000, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, // 00000000111111111111111111111111111111111111111111111111111111111111111000000000
            0b00000011, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b10000000, // 00000011111111111111111111111111111111111111111111111111111111111111111110000000
            0b00000111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11000000, // 00000111111111111111111111111111111111111111111111111111111111111111111111000000
            0b00001111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11100000, // 00001111111111111111111111111111111111111111111111111111111111111111111111100000
            0b00011111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11110000, // 00011111111111111111111111111111111111111111111111111111111111111111111111110000
            0b00111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111000, // 00111111111111111111111111111111111111111111111111111111111111111111111111111000
            0b01111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111100, // 01111111111111111111111111111111111111111111111111111111111111111111111111111100
            0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111110, // 11111111111111111111111111111111111111111111111111111111111111111111111111111110
            0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111110, // 11111111111111111111111111111111111111111111111111111111111111111111111111111110
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000  // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
        };
        constexpr uint8_t DOWN_ARROW[] = {
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b01111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000001111111111111111111111111111110000000000000000000000000
            0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111110, // 11111111111111111111111111111111111111111111111111111111111111111111111111111110
            0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111110, // 11111111111111111111111111111111111111111111111111111111111111111111111111111110
            0b01111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111100, // 01111111111111111111111111111111111111111111111111111111111111111111111111111100
            0b00111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111000, // 00111111111111111111111111111111111111111111111111111111111111111111111111111000
            0b00011111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11110000, // 00011111111111111111111111111111111111111111111111111111111111111111111111110000
            0b00001111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11100000, // 00001111111111111111111111111111111111111111111111111111111111111111111111100000
            0b00000011, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b10000000, // 00000011111111111111111111111111111111111111111111111111111111111111111110000000
            0b00000000, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, // 00000000111111111111111111111111111111111111111111111111111111111111111000000000
            0b00000000, 0b00111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111000, 0b00000000, // 00000000001111111111111111111111111111111111111111111111111111111111100000000000
            0b00000000, 0b00001111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11100000, 0b00000000, // 00000000000011111111111111111111111111111111111111111111111111111110000000000000
            0b00000000, 0b00000011, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b10000000, 0b00000000, // 00000000000000111111111111111111111111111111111111111111111111111000000000000000
            0b00000000, 0b00000000, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, // 00000000000000001111111111111111111111111111111111111111111111100000000000000000
            0b00000000, 0b00000000, 0b00111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111000, 0b00000000, 0b00000000, // 00000000000000000011111111111111111111111111111111111111111110000000000000000000
            0b00000000, 0b00000000, 0b00001111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11100000, 0b00000000, 0b00000000, // 00000000000000000000111111111111111111111111111111111111111000000000000000000000
            0b00000000, 0b00000000, 0b00000011, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b10000000, 0b00000000, 0b00000000, // 00000000000000000000001111111111111111111111111111111111100000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b11111111, 0b11111111, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000011111111111111111111111111111110000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00111111, 0b11111111, 0b11111111, 0b11111000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000111111111111111111111111111000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00001111, 0b11111111, 0b11111111, 0b11100000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000001111111111111111111111100000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00000011, 0b11111111, 0b11111111, 0b10000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000000011111111111111111110000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b11111111, 0b11111110, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000000000111111111111111000000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00111111, 0b11111000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000000000001111111111100000000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00001111, 0b11100000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000000000000011111110000000000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000011, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000  // 00000000000000000000000000000000000000111000000000000000000000000000000000000000
        };
        constexpr uint8_t STOP[] = {
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000000000000000000000000000000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000000000000000000000000000000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000000000000000000000000000000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00001111, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000000000000011111000000000000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00111111, 0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000000000001111111000000000000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b11111110, 0b00111111, 0b11000011, 0b11111000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000011111110001111111100001111111000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b11111111, 0b00111111, 0b11000111, 0b11111000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000011111111001111111100011111111000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b11111111, 0b00111111, 0b11000111, 0b11111000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000011111111001111111100011111111000000000000000000000000000
            0b00000000, 0b00000000, 0b11111100, 0b11111111, 0b00111111, 0b11000111, 0b11111000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000001111110011111111001111111100011111111000000000000000000000000000
            0b00000000, 0b00000001, 0b11111110, 0b11111111, 0b00111111, 0b11000111, 0b11111000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000011111111011111111001111111100011111111000000000000000000000000000
            0b00000000, 0b00000001, 0b11111110, 0b11111111, 0b00111111, 0b11000111, 0b11111000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000011111111011111111001111111100011111111000000000000000000000000000
            0b00000000, 0b00000001, 0b11111110, 0b11111111, 0b00111111, 0b11000111, 0b11111000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000011111111011111111001111111100011111111000000000000000000000000000
            0b00000000, 0b00000001, 0b11111110, 0b11111111, 0b00111111, 0b11000111, 0b11111000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000011111111011111111001111111100011111111000000000000000000000000000
            0b00000000, 0b00000001, 0b11111110, 0b11111111, 0b00111111, 0b11000111, 0b11111000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000011111111011111111001111111100011111111000000000000000000000000000
            0b00000000, 0b00000001, 0b11111110, 0b11111111, 0b00111111, 0b11001111, 0b11111000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000011111111011111111001111111100111111111000000000000000000000000000
            0b00000000, 0b00000001, 0b11111110, 0b11111111, 0b00111111, 0b11001111, 0b11111000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000011111111011111111001111111100111111111000000000000000000000000000
            0b00000000, 0b00000001, 0b11111110, 0b11111111, 0b00111111, 0b11001111, 0b11111000, 0b00011110, 0b00000000, 0b00000000, // 00000000000000011111111011111111001111111100111111111000000111100000000000000000
            0b00000000, 0b00000001, 0b11111110, 0b11111111, 0b00111111, 0b11001111, 0b11111000, 0b00111111, 0b10000000, 0b00000000, // 00000000000000011111111011111111001111111100111111111000001111111000000000000000
            0b00000000, 0b00000001, 0b11111110, 0b11111111, 0b00111111, 0b11000111, 0b11111000, 0b01111111, 0b10000000, 0b00000000, // 00000000000000011111111011111111001111111100011111111000011111111000000000000000
            0b00000000, 0b00000001, 0b11111110, 0b11111111, 0b00111111, 0b11000111, 0b11111000, 0b01111111, 0b10000000, 0b00000000, // 00000000000000011111111011111111001111111100011111111000011111111000000000000000
            0b00000000, 0b00000001, 0b11111110, 0b11111111, 0b11111111, 0b11000111, 0b11111000, 0b01111111, 0b10000000, 0b00000000, // 00000000000000011111111011111111111111111100011111111000011111111000000000000000
            0b00000000, 0b00000001, 0b11111110, 0b11111111, 0b11111111, 0b11000111, 0b11111000, 0b01111111, 0b10000000, 0b00000000, // 00000000000000011111111011111111111111111100011111111000011111111000000000000000
            0b00000000, 0b00000001, 0b11111110, 0b11111111, 0b11111111, 0b11111111, 0b11111000, 0b01111111, 0b10000000, 0b00000000, // 00000000000000011111111011111111111111111111111111111000011111111000000000000000
            0b00000000, 0b00000001, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111000, 0b01111111, 0b10000000, 0b00000000, // 00000000000000011111111111111111111111111111111111111000011111111000000000000000
            0b00000000, 0b00000001, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111000, 0b01111111, 0b10000000, 0b00000000, // 00000000000000011111111111111111111111111111111111111000011111111000000000000000
            0b00000000, 0b00000001, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111000, 0b11111111, 0b10000000, 0b00000000, // 00000000000000011111111111111111111111111111111111111000111111111000000000000000
            0b00000000, 0b00000001, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111011, 0b11111111, 0b10000000, 0b00000000, // 00000000000000011111111111111111111111111111111111111011111111111000000000000000
            0b00000000, 0b00000001, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b10000000, 0b00000000, // 00000000000000011111111111111111111111111111111111111111111111111000000000000000
            0b00000000, 0b00000001, 0b11111100, 0b00011000, 0b00001000, 0b00001000, 0b00011111, 0b11111111, 0b10000000, 0b00000000, // 00000000000000011111110000011000000010000000100000011111111111111000000000000000
            0b00000000, 0b00000001, 0b11111011, 0b11101111, 0b01111011, 0b11101011, 0b11101111, 0b11111111, 0b00000000, 0b00000000, // 00000000000000011111101111101111011110111110101111101111111111110000000000000000
            0b00000000, 0b00000001, 0b11111011, 0b11111111, 0b01111011, 0b11101011, 0b11101111, 0b11111110, 0b00000000, 0b00000000, // 00000000000000011111101111111111011110111110101111101111111111100000000000000000
            0b00000000, 0b00000001, 0b11111100, 0b00011111, 0b01111011, 0b11101000, 0b00011111, 0b11111110, 0b00000000, 0b00000000, // 00000000000000011111110000011111011110111110100000011111111111100000000000000000
            0b00000000, 0b00000001, 0b11111111, 0b11101111, 0b01111011, 0b11101011, 0b11111111, 0b11111100, 0b00000000, 0b00000000, // 00000000000000011111111111101111011110111110101111111111111111000000000000000000
            0b00000000, 0b00000001, 0b11111011, 0b11101111, 0b01111011, 0b11101011, 0b11111111, 0b11110000, 0b00000000, 0b00000000, // 00000000000000011111101111101111011110111110101111111111111100000000000000000000
            0b00000000, 0b00000001, 0b11111100, 0b00011111, 0b01111000, 0b00001011, 0b11111111, 0b11100000, 0b00000000, 0b00000000, // 00000000000000011111110000011111011110000000101111111111111000000000000000000000
            0b00000000, 0b00000001, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11100000, 0b00000000, 0b00000000, // 00000000000000011111111111111111111111111111111111111111111000000000000000000000
            0b00000000, 0b00000001, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b00000000, 0b00000000, 0b00000000, // 00000000000000011111111111111111111111111111111111111111000000000000000000000000
            0b00000000, 0b00000001, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111100, 0b00000000, 0b00000000, 0b00000000, // 00000000000000011111111111111111111111111111111111111100000000000000000000000000
            0b00000000, 0b00000000, 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000001111111111111111111111111111111111111000000000000000000000000000
            0b00000000, 0b00000000, 0b00111111, 0b11111111, 0b11111111, 0b11111111, 0b11100000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000011111111111111111111111111111111100000000000000000000000000000
            0b00000000, 0b00000000, 0b00001111, 0b11111111, 0b11111111, 0b11111100, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000111111111111111111111111110000000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000000000000000000000000000000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000000000000000000000000000000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000000000000000000000000000000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, // 00000000000000000000000000000000000000000000000000000000000000000000000000000000
            0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000  // 00000000000000000000000000000000000000000000000000000000000000000000000000000000
        };
#pragma endregion
        
        constexpr uint16_t COMMAND_COLOR = 0xFFFF;

        void drawCommand(const uint8_t& command) {
            if (!!(command & Radio::Payloads::STOP)) {
                OLED::display().drawBitmap(24, 17, STOP, 80, 46, COMMAND_COLOR);
            }
            if (!!(command & Radio::Payloads::GO_UP)) {
                OLED::display().drawBitmap(24, 17, UP_ARROW, 80, 46, COMMAND_COLOR);
            }
            if (!!(command & Radio::Payloads::GO_DOWN)) {
                OLED::display().drawBitmap(24, 17, DOWN_ARROW, 80, 46, COMMAND_COLOR);
            }
        }
    }

    // Holds instance of radio as well as payloads, address, and how often to use the radio
    namespace Radio {
        RF24& radio() {static RF24 rd; return rd;};

        namespace Payloads {
            constexpr uint8_t GO_UP      = 0b0000001;
            constexpr uint8_t GO_DOWN    = 0b0000010;
            constexpr uint8_t STOP       = 0b0000100;
        }
        
        constexpr uint8_t address[6] = "00001";
        constexpr uint64_t radioInterval = 20;
    }

    namespace Storage {
        // Stored as first and pretty much only value in EEPROM
        constexpr size_t RADIO_CHANNEL_ADDRESS = 0;

        inline uint8_t getRadioChannel() {
            return EEPROM.read(RADIO_CHANNEL_ADDRESS);
        }

        inline void setRadioChannel(uint8_t to) {
            // Ensures radio channel can never be above 125 limit
            EEPROM.write(RADIO_CHANNEL_ADDRESS, min(to, 125));
        }
    }

    // In this case, instances of channel buttons
    namespace InputStates {
        Bounce2::Button& channelUpButton() {static Bounce2::Button btn; return btn;};
        Bounce2::Button& channelDownButton() {static Bounce2::Button btn; return btn;};
    }

    namespace EventHandling {
        void handleChannelButtons() {
            // debounce button state
            InputStates::channelDownButton().update();
            InputStates::channelUpButton().update();

            bool downPressed = InputStates::channelDownButton().pressed();
            bool upPressed = InputStates::channelUpButton().pressed();

            auto chn = Storage::getRadioChannel(); // received from EEPROM
            if (downPressed && upPressed) return;  // don't let user press both buttons
            if (downPressed) {
                Storage::setRadioChannel(chn - 1);
                Radio::radio().setChannel(chn - 1);
            }
            if (upPressed) {
                Storage::setRadioChannel(chn + 1);
                Radio::radio().setChannel(chn + 1);
            }
            UI::drawChannel();
        }
    }

    // Debounce for channel buttons
    constexpr unsigned long debounceInterval = 200;

    void commonInitialize() {
        auto radioChannel = Storage::getRadioChannel(); // restore channel from storage

        Radio::radio().begin();
        Radio::radio().setChannel(radioChannel);

        // channel buttons are connected to ground, so input LOW is pressed
        InputStates::channelDownButton().attach(DigitalInputs::RF_CHANNEL_DOWN, INPUT_PULLUP);
        InputStates::channelDownButton().interval(debounceInterval);
        InputStates::channelDownButton().setPressedState(LOW);

        InputStates::channelUpButton().attach(DigitalInputs::RF_CHANNEL_UP, INPUT_PULLUP);
        InputStates::channelUpButton().interval(debounceInterval);
        InputStates::channelUpButton().setPressedState(LOW);

        // get display going
        OLED::display().begin(SSD1306_SWITCHCAPVCC, OLED_ADDRESS);
    }

    void handleCommonRun() {
        EventHandling::handleChannelButtons();
    }
}

#endif